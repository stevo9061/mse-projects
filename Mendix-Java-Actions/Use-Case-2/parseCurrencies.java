// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package cryptodashboardapp.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.JsonNode;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.List;
import java.util.ArrayList;
import com.mendix.logging.ILogNode;

public class parseCurrencies extends CustomJavaAction<java.util.List<IMendixObject>>
{
	private final java.lang.String JSONFile;

	public parseCurrencies(
		IContext context,
		java.lang.String _jSONFile
	)
	{
		super(context);
		this.JSONFile = _jSONFile;
	}

	@java.lang.Override
    // CC: 1 (Base value)
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		// BEGIN USER CODE
        IContext context = this.getContext();
        String jsonString = this.JSONFile;
        
        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode rootNode = objectMapper.readTree(jsonString);

        // Logger for debugging
        ILogNode logger = Core.getLogger("parseCurrencies");
        logger.info("Parsing currencies from JSON");

        // Create list that will be returned later
        List<IMendixObject> currencyObjects = new ArrayList<>();

        // Since the JSON is an object with key-value pairs, iterate over the fields        
        Iterator<Entry<String, JsonNode>> fields = rootNode.fields();

        // CC: 1
        if(!fields.hasNext()){
            throw new com.mendix.systemwideinterfaces.MendixRuntimeException("parseCurrencies error: JSON is empty or invalid");
        }

        // CC: 1
        while (fields.hasNext()) {
            Entry<String, JsonNode> field = fields.next();
            String currencySymbol = field.getKey();    // z.B. "1inch", "aave", etc.
            String currencyName = field.getValue().asText();  // z.B. "1inch", "Aave", etc.
            
            // Create a new Currency object (entity: CryptoDashboardApp.Currency)
            IMendixObject currency = Core.instantiate(context, "CryptoDashboardApp.Currency");
            // Set the currency symbol and name - adapt the attribute names to your domain model
            currency.setValue(context, "symbol", currencySymbol);
            currency.setValue(context, "name", currencyName);
            
            logger.info("Parsed currency: " + currencySymbol + " - " + currencyName);
            
            currencyObjects.add(currency);
        }
        
        return currencyObjects;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "parseCurrencies";
	}

	// BEGIN EXTRA CODE
    // Cyclomatic Complexity: 3
	// Reason: if conditions + while+ basic value for method
	// END EXTRA CODE
}
