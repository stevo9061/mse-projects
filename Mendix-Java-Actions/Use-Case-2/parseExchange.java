// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package cryptodashboardapp.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.JsonNode;
import java.util.Iterator;
import java.util.Map.Entry;
import java.math.BigDecimal;
import java.util.List;
import java.util.ArrayList;
import com.mendix.logging.ILogNode;

public class parseExchange extends CustomJavaAction<java.util.List<IMendixObject>>
{
	private final java.lang.String JSONFile;

	public parseExchange(
		IContext context,
		java.lang.String _jSONFile
	)
	{
		super(context);
		this.JSONFile = _jSONFile;
	}

	@java.lang.Override
	// CC: 1 (Base value)
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		// BEGIN USER CODE
		IContext context = this.getContext();

		String jsonString = this.JSONFile;
		
		ObjectMapper objectMapper = new ObjectMapper();
		JsonNode rootNode = objectMapper.readTree(JSONFile);

		// Define a logger
		ILogNode logger = Core.getLogger("parseExchange");

		// This list is returned at the end and contains all Exchange objects
		List<IMendixObject> exchangeObjects = new ArrayList<>();

		 // Determine the dynamic master key
		Iterator<String> fieldName = rootNode.fieldNames();
		

		// Skip the first key ("date")
		String firstFieldName = fieldName.next();
		logger.info("Skipping date field: " + firstFieldName);

		// CC: 1
		if (!fieldName.hasNext()) {
			throw new com.mendix.systemwideinterfaces.MendixRuntimeException("\"parseExchange\" has an error: Determination of the dynamic master key failed");
		}
		
		// Use of the dynamic key (e.g. ‘xrp’, ‘btc’, etc.)
		String currencyKey = fieldName.next();

		// Access the currency object (e.g. ‘btc’)
		JsonNode currency = rootNode.get(currencyKey);

		// Debugging output to see what's in currency
		logger.info("Currency value: " + currency);
		logger.info("Currency node type: " + (currency != null ? currency.getNodeType() : "null"));

		// CC: 2
		if ((currency != null && currency.isObject())) {
			Iterator<Entry<String, JsonNode>> fields = currency.fields();
			while (fields.hasNext()) {
				Entry<String, JsonNode> field = fields.next();
				String coinName = field.getKey(); // 1000sats", "aave", etc.
				double value = field.getValue().asDouble(); // The value of the coin

				// Create a new Exchange object and set the attributes
				IMendixObject exchange = Core.instantiate(context, "CryptoDashboardApp.Exchange");

				// Set the coin name and value
				exchange.setValue(context, "symbol", field.getKey());

				BigDecimal valueAsBigDecimal = BigDecimal.valueOf(value);
				exchange.setValue(context, "value", valueAsBigDecimal);
				
				// Add the object to the list to return multiple objects
    			exchangeObjects.add(exchange);

			}
		} else {
			System.out.println("Currency value: " + currency);

					throw new com.mendix.systemwideinterfaces.MendixRuntimeException("\"parseExchange\" has an error: Currency is null or no object");

		}

		return exchangeObjects;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "parseExchange";
	}

	// BEGIN EXTRA CODE
	// Cyclomatic Complexity: 4
	// Reason: basic value for method + if conditions + while
	// END EXTRA CODE
}
