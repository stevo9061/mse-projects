// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package forgotpassword.actions;

import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.UUID;
import com.mendix.core.Core;
import com.mendix.core.conf.RuntimeVersion;
import com.mendix.externalinterface.connector.RequestHandler;
import com.mendix.m2ee.api.IMxRuntimeRequest;
import com.mendix.m2ee.api.IMxRuntimeResponse;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import forgotpassword.proxies.SignInHelper;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.ISession;
import com.mendix.systemwideinterfaces.core.IUser;

public class SignIn extends CustomJavaAction<IMendixObject>
{
	/** @deprecated use UserAccount.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __UserAccount;
	private final system.proxies.User UserAccount;

	public SignIn(
		IContext context,
		IMendixObject _userAccount
	)
	{
		super(context);
		this.__UserAccount = _userAccount;
		this.UserAccount = _userAccount == null ? null : system.proxies.User.initialize(getContext(), _userAccount);
	}

	@java.lang.Override
	// CC: 1 (base value) + 1 (if)
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		
		if( !handlerStarted ) {
			Core.addRequestHandler("signin/", new SignInHandler());
			handlerStarted = true;
		}
		
		SignInHelper helper = SignInHelper.initialize(getContext(), Core.instantiate(getContext(), SignInHelper.entityName));
		
		String uuid = UUID.randomUUID().toString();
		helper.setUUID(uuid);
		
		openUserRequests.put(uuid, Core.getUser(getContext(), this.UserAccount.getName()) );
		
		
		return helper.getMendixObject();
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "SignIn";
	}

	// BEGIN EXTRA CODE
	
	private static boolean handlerStarted = false;
	private static HashMap<String, IUser> openUserRequests = new HashMap<>();
	
	private static String appLocation = Core.getConfiguration().getApplicationRootUrl();
	
		
	public static class SignInHandler extends RequestHandler {
		
		@Override
		// CC: 1 (base value) + 3 (if)
		protected void processRequest( IMxRuntimeRequest request, IMxRuntimeResponse response, String arg2 ) throws Exception {
			String uuid = request.getParameter("uuid");
			
			if( uuid != null ) {
				
				if( openUserRequests.containsKey(uuid) ) {
					IUser user = openUserRequests.remove(uuid); 
					if( user != null && user.isActive() && !user.isAnonymous() && !user.isBlocked() ) {
						ISession session = Core.initializeSession(user, (this.getSessionFromRequest(request) != null ? this.getSessionFromRequest(request).getId().toString() : null));
							//use reflection to call the addCookie method with 7 parameters, which was added in 9.20	
							@SuppressWarnings("rawtypes")
							Class[] methodSignature = {String.class, String.class, String.class, String.class, int.class, boolean.class, boolean.class};
							Method addCookie = response.getClass().getMethod("addCookie", methodSignature);
							addCookie.invoke(response, Core.getConfiguration().getSessionIdCookieName(), session.getId().toString(), "/", "", -1, true, true);
						response.addCookie("XASID", "0."+Core.getXASId(),"/", "", -1, true);
					}
				}
				else 
					Core.getLogger("SigninHandler").info("Unable to find UUID " + uuid);
			}
			else 
				Core.getLogger("SigninHandler").info("No UUID provided");
			
			
			response.setStatus(IMxRuntimeResponse.SEE_OTHER);
			response.addHeader("location", appLocation);
		}
		
	}
	// END EXTRA CODE
	// Total CC of the class: 6
}
